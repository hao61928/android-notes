前几天看了一下Spring的部分源码，发现回调机制被大量使用，觉得有必要把Java回调机制的理解归纳总结一下，以方便在研究类似于Spring源码这样的代码时能更加得心应手。 

注：本文不想扯很多拗口的话来充场面，我的目的是希望以最简明扼要的语言将Java回调的大概机制说清楚。好了，言归正传。 

一句话，回调是一种双向调用模式，什么意思呢，就是说，被调用方在被调用时也会调用对方，这就叫回调。“If you call me, i will call back”。 
不理解？没关系，先看看这个可以说比较经典的使用回调的方式： 
?class A实现接口InA ――背景1 
?class A中包含一个class B的引用b ――背景2 
?class B有一个参数为InA的方法test(InA a) ――背景3 
?A的对象a调用B的方法传入自己，test(a) ――这一步相当于you call me 
?然后b就可以在test方法中调用InA的方法 ――这一步相当于i call you back 

是不是清晰一点了？下面再来看一个完全符合这个方式模板的例子 
（PS：这个例子来源于网络，由于这个例子表现的功能极度拉风，令我感觉想想出一个超越它的例子确实比较困难，所以直接搬过来） 



Java代码 复制代码 收藏代码
1.//相当于接口InA  
2.public interface BoomWTC{  
3.  //获得拉登的决定  
4.  public benLaDengDecide();  
5.  
6.  // 执行轰炸世贸  
7.  public void boom();  
8.}  
9.  
10.//相当于class A  
11.public class At$911 implements BoomWTC{//相当于【背景1】  
12.  private boolean decide;  
13.  private TerroristAttack ta;//相当于【背景2】  
14.  
15.  public At$911(){  
16.    Date now=new Date();  
17.    SimpleDateFormat myFmt1=new SimpleDateFormat("yy/MM/dd HH:mm");  
18.    this.dicede= myFmt.format(dt).equals("01/09/11 09:44");  
19.    this.ta=new TerroristAttack();  
20.  }  
21.  
22.  //获得拉登的决定  
23.  public boolean benLaDengDecide(){  
24.    return decide;  
25.  }  
26.  
27.  // 执行轰炸世贸  
28.  public void boom(){  
29.    ta.attack(new At$911);//class A调用class B的方法传入自己的对象，相当于【you call me】  
30.  }  
31.}  
32.  
33.//相当于class B  
34.public class TerroristAttack{  
35.  public TerroristAttack(){  
36.  }  
37.  
38.  public attack(BoomWTC bmw){――这相当于【背景3】  
39.    if(bmw.benLaDengDecide()){//class B在方法中回调class A的方法，相当于【i call you back】  
40.     //let's go.........  
41.    }  
42.  }  
43.}  


现在应该对回调有一点概念了吧。 
可是问题来了，对于上面这个例子来说，看不出用回调有什么好处，直接在调用方法不就可以了，为什么要使用回调呢？ 
事实上，很多需要进行回调的操作是比较费时的，被调用者进行费时操作，然后操作完之后将结果回调给调用者。看这样一个例子： 



Java代码 复制代码 收藏代码
1.//模拟Spring中HibernateTemplate回调机制的代码  
2.    interface CallBack{     
3.        public void doCRUD();     
4.    }    
5.        
6.    public class HibernateTemplate {     
7.            
8.        public void execute(CallBack action){    
9.            getConnection();    
10.            action.doCRUD();    
11.            releaseConnection();    
12.        }    
13.         
14.        public void add(){    
15.             execute(new CallBack(){    
16.                public void doCRUD(){    
17.                    System.out.println("执行add操作...");    
18.                }    
19.             });    
20.        }     
21.        
22.        public void getConnection(){    
23.            System.out.println("获得连接...");    
24.        }    
25.            
26.        public void releaseConnection(){    
27.            System.out.println("释放连接...");    
28.        }    
29.            
30.    }    


可能上面这个例子你不能一眼看出个所以然来，因为其实这里A是作为一个内部匿名类存在的。好，不要急，让我们把这个例子来重构一下： 



Java代码 复制代码 收藏代码
1.interface CallBack{   //相当于接口InA  
2.    public void doCRUD();     
3.}    
4.  
5.public class A implements CallBack{//【背景1】  
6.    private B b;//【背景2】  
7.    public void doCRUD(){    
8.          System.out.println("执行add操作...");    
9.     }    
10.  
11.     public void add(){    
12.             b.execute(new A());//【you call me】    
13.        }    
14.}  
15.  
16.public class B{  
17.     public void execute(CallBack action){  //【背景3】  
18.            getConnection();    
19.            action.doCRUD();  //【i call you back】  
20.            releaseConnection();    
21.        }    
22.  
23.      public void getConnection(){    
24.            System.out.println("获得连接...");    
25.        }    
26.            
27.        public void releaseConnection(){    
28.            System.out.println("释放连接...");    
29.        }    
30.}  


好了，现在就明白多了吧，完全可以转化为上面所说的回调使用方式的模板。 
现在在来看看为什么要使用回调，取得连接getConnection();是费时操作，A希望由B来进行这个费时的操作，执行完了之后通知A即可（即所谓的i call you back）。这就是这里使用回调的原因。 

在网上看到了一个比喻，觉得很形象，这里借用一下： 
你有一个复杂的问题解决不了，打电话给你的同学，你的同学说可以解决这个问题，但是需要一些时间，那么你不可能一直拿着电话在那里等，你会把你的电话号码告诉他，让他解决之后打电话通知你。回调就是体现在你的同学又反过来拨打你的号码。 
结合到前面所分析的，你打电话给你同学就是【you call me】，你同学解决完之后打电话给你就是【i call you back】。 

怎么样，现在理解了吧？  

---------------------------------以下为更新---------------------------------- 

看了有些朋友的回帖，我又思考了一下，感觉自己之前对回调作用的理解的确存在偏差。 
下面把自己整理之后的想法共享一下，如果有错误希望指出！多谢！ 

先说上面这段代码，本来完全可以用模板模式来进行实现： 



Java代码 复制代码 收藏代码
1.public abstract class B{  
2.     public void execute(){   
3.            getConnection();    
4.            doCRUD();    
5.            releaseConnection();    
6.        }    
7.  
8.      public abstract void doCRUD();  
9.  
10.      public void getConnection(){    
11.            System.out.println("获得连接...");    
12.        }    
13.            
14.        public void releaseConnection(){    
15.            System.out.println("释放连接...");    
16.        }    
17.}  
18.  
19.public class A extends B{  
20.    public void doCRUD(){    
21.          System.out.println("执行add操作...");    
22.     }    
23.  
24.     public void add(){    
25.             doCRUD();  
26.        }    
27.}  
28.  
29.public class C extends B{  
30.    public void doCRUD(){    
31.          System.out.println("执行delete操作...");    
32.     }    
33.  
34.     public void delete(){    
35.             doCRUD();  
36.        }    
37.}  


如果改为回调实现是这样的： 



Java代码 复制代码 收藏代码
1.interface CallBack{     
2.    public void doCRUD();     
3.}    
4.    
5.public class HibernateTemplate {     
6.    public void execute(CallBack action){    
7.        getConnection();    
8.        action.doCRUD();    
9.        releaseConnection();    
10.    }    
11.     
12.    public void add(){    
13.         execute(new CallBack(){    
14.            public void doCRUD(){    
15.                System.out.println("执行add操作...");    
16.            }    
17.         });    
18.     }     
19.  
20.     public void delete(){    
21.         execute(new CallBack(){    
22.            public void doCRUD(){    
23.                System.out.println("执行delete操作...");    
24.            }    
25.         });    
26.     }   
27.    
28.    public void getConnection(){    
29.        System.out.println("获得连接...");    
30.    }    
31.        
32.    public void releaseConnection(){    
33.        System.out.println("释放连接...");    
34.    }    
35.        
36.}    


可见摒弃了继承抽象类方式的回调方式更加简便灵活。不需要为了实现抽象方法而总是继承抽象类，而是只需要通过回调来增加一个方法即可，更加的直观简洁灵活。这算是回调的好处之一。 

下面再给出一个关于利用回调配合异步调用的很不错的例子，来源于http://kt8668.iteye.com/blog/205739 
回调接口： 



Java代码 复制代码 收藏代码
1.public interface CallBack {    
2.    /**  
3.     * 执行回调方法  
4.     * @param objects   将处理后的结果作为参数返回给回调方法  
5.     */    
6.    public void execute(Object... objects );    
7.}    


消息的发送者： 



Java代码 复制代码 收藏代码
1./** 
2. * 这个类相当于你自己 
3. */  
4.public class Local implements CallBack,Runnable{    
5.     
6.    private Remote remote;    
7.        
8.    /**  
9.     * 发送出去的消息  
10.     */    
11.    private String message;    
12.        
13.    public Local(Remote remote, String message) {    
14.        super();    
15.        this.remote = remote;    
16.        this.message = message;    
17.    }    
18.    
19.    /**  
20.     * 发送消息  
21.     */    
22.    public void sendMessage()    
23.    {    
24.        /**当前线程的名称**/    
25.        System.out.println(Thread.currentThread().getName());    
26.        /**创建一个新的线程发送消息**/    
27.        Thread thread = new Thread(this);    
28.        thread.start();    
29.        /**当前线程继续执行**/    
30.        System.out.println("Message has been sent by Local~!");    
31.    }    
32.    
33.    /**  
34.     * 发送消息后的回调函数  
35.     */    
36.    public void execute(Object... objects ) {    
37.        /**打印返回的消息**/    
38.        System.out.println(objects[0]);    
39.        /**打印发送消息的线程名称**/    
40.        System.out.println(Thread.currentThread().getName());    
41.        /**中断发送消息的线程**/    
42.        Thread.interrupted();    
43.    }    
44.        
45.    public static void main(String[] args)    
46.    {    
47.        Local local = new Local(new Remote(),"Hello");    
48.            
49.        local.sendMessage();    
50.    }    
51.    
52.    public void run() {    
53.        remote.executeMessage(message, this);  //这相当于给同学打电话，打完电话之后，这个线程就可以去做其他事情了，只不过等到你的同学打回电话给你的时候你要做出响应  
54.            
55.    }    
56.}    


消息的接收者： 



Java代码 复制代码 收藏代码
1./** 
2. * 这个类相当于你的同学 
3. */  
4.public class Remote {    
5.    
6.    /**  
7.     * 处理消息  
8.     * @param msg   接收的消息  
9.     * @param callBack  回调函数处理类  
10.     */    
11.    public void executeMessage(String msg,CallBack callBack)    
12.    {    
13.        /**模拟远程类正在处理其他事情，可能需要花费许多时间**/    
14.        for(int i=0;i<1000000000;i++)    
15.        {    
16.                
17.        }    
18.        /**处理完其他事情，现在来处理消息**/    
19.        System.out.println(msg);    
20.        System.out.println("I hava executed the message by Local");    
21.        /**执行回调**/    
22.        callBack.execute(new String[]{"Nice to meet you~!"});  //这相当于同学执行完之后打电话给你  
23.    }    
24.        
25.}    

/////////////////////////////////////////////////////////////////////////////////////////////
1、回调接口
public interface Callback {
 
   String callBack();
 }
 

2、调用者
public class Another {
  private Callback callback;
  //调用实现类的方法
  public void setCallback(Callback callback) {
    this.callback = callback;
  }
    //业务需要的时候，通过委派，来调用实现类的具体方法
  public void doCallback(){
    System.out.println(callback.callBack());
  }
}
 

3、测试回调函数 
public class TestCallcack {
  public static void main(String[] args) {
    //创建调用者的实现类
    Another another = new Another();
    //将回掉接口注册到实现类中
    another.setCallback(new Callback() {  
      @Override
      public String callBack() {
        return "you are a pig";
      }
    });
    //执行回调函数
    another.doCallback();
  }
}

//////////////////////////////////////////////////////////////////

回调函数，第一次见是在Java编程思想中，以及后来的观察者模式也应用了回调函数的思想。但是一直都没有重视，终于在一次面试的时候吃亏了，越来越理解为什么很多人说Java编程思想这本书要一遍遍的看，吃透！

        首先在网络上搜索很多文章介绍什么是回调函数，看的云里雾里的。后来自己一步步分解终于理解了，记录如下。

        从维基百科上面摘抄定义：（看完本篇文章再来理解这个定义）

        在计算机程序设计中，回调函数，或简称回调，是指通过函数参数传递到其它代码的，某一块可执行代码的引用。这一设计允许了底层代码调用在高层定义的子程序。

        在Java里面，我们使用接口来实现回调。

        这篇文章中的解说定义非常好：http://blog.csdn.net/sweetwxh/article/details/2067139

        所谓的回调，就是程序员A写了一段程序（程序a），其中预留有回调函数接口，并封装好了该程序。程序员B要让a调用自己的程序b中的一个方法，于是，他通过a中的接口回调自己b中的方法。下面是例子。

      1.  首先定义一个类Caller，按照上面的定义就是程序员A写的程序a，这个类里面保存一个接口引用。

       



[java] view plain copy 
01.public class Caller {  
02.    private MyCallInterface callInterface;  
03.      
04.    public Caller() {  
05.    }  
06.      
07.    public void setCallFunc(MyCallInterface callInterface) {  
08.        this.callInterface = callInterface;  
09.    }  
10.      
11.    public void call() {  
12.        callInterface.printName();  
13.    }  
14.}  





        2.  当然需要接口的定义，为了方便程序员B根据我的定义编写程序实现接口。

   



[java] view plain copy 
01.public interface MyCallInterface {  
02.    public void  printName();  
03.}  





       3.  第三是定义程序员B写的程序b



[java] view plain copy 
01.public class Client implements MyCallInterface {  
02.  
03.    @Override  
04.    public void printName() {  
05.        System.out.println("This is the client printName method");  
06.    }  
07.}  





        4.  测试如下



[java] view plain copy 
01.public class Test {  
02.    public static void main(String[] args) {  
03.        Caller caller = new Caller();  
04.        caller.setCallFunc(new Client());  
05.        caller.call();  
06.    }  
07.}  





       看到这里应该明白什么是回调了，有些文章介绍的很好，但是刚开始没看明白，是因为把第3步的类省略，直接写成匿名类了。

        5.  在测试方法中直接使用匿名类，省去第3步。



[java] view plain copy 
01.public class Test {  
02.    public static void main(String[] args) {  
03.        Caller caller = new Caller();  
04.//      caller.setCallFunc(new Client());  
05.        caller.setCallFunc(new MyCallInterface() {  
06.            public void printName() {  
07.                System.out.println("This is the client printName method");  
08.            }  
09.        });  
10.        caller.call();  
11.    }  
12.}  





       看完了上面的文章，直接看下面这篇文章：http://kidult.iteye.com/blog/148982

      以上就是回调函数的全部理解。



//////////////////////////////////////////////////////////
如果我们要测试一个类的方法的执行时间，通常我们会这样做：

java 代码


 
1. public   class  TestObject {    
2.     /**   
3.      * 一个用来被测试的方法，进行了一个比较耗时的循环   
4.      */     
5.     public   static   void  testMethod(){    
6.         for ( int  i= 0 ; i< 100000000 ; i++){    
7.                
8.         }   
9.     }   
10.     /**   
11.      * 一个简单的测试方法执行时间的方法   
12.      */     
13.     public   void  testTime(){    
14.         long  begin = System.currentTimeMillis(); //测试起始时间     
15.         testMethod(); //测试方法     
16.         long  end = System.currentTimeMillis(); //测试结束时间     
17.         System.out.println("[use time]:"  + (end - begin)); //打印使用时间     
18.     }   
19.        
20.     public   static   void  main(String[] args) {    
21.         TestObject test=new  TestObject();    
22.         test.testTime();   
23.     }   
24. }   


大家看到了testTime()方法，就只有"//测试方法"是需要改变的，下面我们来做一个函数实现相同功能但更灵活：

 首先定一个回调接口：

java 代码


 
1. public   interface  CallBack {    
2.     //执行回调操作的方法     
3.     void  execute();    
4. }   


然后再写一个工具类：

java 代码


 
1. public   class  Tools {    
2.        
3.     /**   
4.      * 测试函数使用时间，通过定义CallBack接口的execute方法   
5.      * @param callBack   
6.      */     
7.     public   void  testTime(CallBack callBack) {    
8.         long  begin = System.currentTimeMillis(); //测试起始时间     
9.         callBack.execute(); ///进行回调操作     
10.         long  end = System.currentTimeMillis(); //测试结束时间     
11.         System.out.println("[use time]:"  + (end - begin)); //打印使用时间     
12.     }   
13.        
14.     public   static   void  main(String[] args) {    
15.         Tools tool = new  Tools();    
16.         tool.testTime(new  CallBack(){    
17.             //定义execute方法     
18.             public   void  execute(){    
19.                 //这里可以加放一个或多个要测试运行时间的方法     
20.                 TestObject.testMethod();   
21.             }   
22.         });   
23.     }   
24.        
25. }   


大家看到，testTime()传入定义callback接口的execute()方法就可以实现回调功能

 、、、、、、、、、、、、、、、、、、、、、、、、、、
不一定要用接口啊,java中回调写得这么麻烦无非就是因为不支持方法参数，所以方法参数用类，类再调用方法来实现，接口不是必须的，随手写一个吧：





public class Test1 {

    public void method1(Test2 test2){
        test2.method2(this);
    }

    public void showName(){
        System.out.println("test1");
    }

    public static void main(String[] args) {
        new Test1().method1(new Test2());
    }
}

class Test2{
    public void method2(Test1 test1){
        test1.showName();
    }
}

